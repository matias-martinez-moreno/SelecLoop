# ===== COMANDO: LLENAR EMPRESAS CON RESE√ëAS =====
# Comando para llenar todas las empresas con m√≠nimo 3-4 rese√±as √∫nicas
# Uso: python manage.py fill_companies_reviews

import random
from datetime import datetime, timedelta
from django.core.management.base import BaseCommand
from django.contrib.auth.models import User
from django.utils import timezone
from core.models import Company, Review, UserProfile


class Command(BaseCommand):
    help = 'Llena todas las empresas con m√≠nimo 3-4 rese√±as √∫nicas usando usuarios aleatorios'

    def add_arguments(self, parser):
        parser.add_argument(
            '--min-reviews',
            type=int,
            default=3,
            help='N√∫mero m√≠nimo de rese√±as por empresa (default: 3)'
        )
        parser.add_argument(
            '--max-reviews',
            type=int,
            default=4,
            help='N√∫mero m√°ximo de rese√±as por empresa (default: 4)'
        )

    def handle(self, *args, **options):
        min_reviews = options['min_reviews']
        max_reviews = options['max_reviews']
        
        self.stdout.write(
            self.style.SUCCESS(f'üöÄ Iniciando llenado de empresas con {min_reviews}-{max_reviews} rese√±as cada una')
        )
        
        # ===== NOMBRES DE USUARIOS ALEATORIOS =====
        first_names = [
            'Alejandro', 'Mar√≠a', 'Carlos', 'Ana', 'Luis', 'Carmen', 'Jos√©', 'Laura',
            'Miguel', 'Isabel', 'Antonio', 'Patricia', 'Francisco', 'Elena', 'Manuel',
            'Rosa', 'David', 'Cristina', 'Juan', 'M√≥nica', 'Pedro', 'Sandra', 'Rafael',
            'Beatriz', 'Fernando', 'Natalia', 'Sergio', 'Andrea', 'Diego', 'Paula',
            'Roberto', 'Silvia', 'Javier', 'Marta', '√Ålvaro', 'Luc√≠a', 'Rub√©n', 'Eva',
            'Daniel', 'Claudia', 'Adri√°n', 'Raquel', 'V√≠ctor', 'Sara', '√ìscar', 'Nuria'
        ]
        
        last_names = [
            'Garc√≠a', 'Rodr√≠guez', 'Mart√≠nez', 'Hern√°ndez', 'L√≥pez', 'Gonz√°lez', 'P√©rez',
            'S√°nchez', 'Ram√≠rez', 'Cruz', 'Flores', 'Morales', 'Guti√©rrez', 'Ruiz',
            'D√≠az', 'Torres', 'Jim√©nez', 'Vargas', 'Reyes', 'Moreno', '√Ålvarez', 'Mendoza',
            'Castillo', 'Romero', 'Herrera', 'Medina', 'Guerrero', 'Ramos', 'Vega',
            'Castro', 'Ortega', 'Delgado', 'Rivera', 'Contreras', 'Espinoza', 'Silva',
            'Molina', 'Valencia', 'Navarro', 'Aguilar', 'Sandoval', 'Campos', 'Pe√±a'
        ]
        
        # ===== TEMPLATES DE RESE√ëAS √öNICAS =====
        review_templates = [
            {
                'job_titles': ['Desarrollador Frontend', 'Analista de Datos', 'Dise√±ador UX/UI', 'Product Manager'],
                'pros_templates': [
                    'Excelente ambiente de trabajo, equipo muy colaborativo y comunicaci√≥n fluida.',
                    'Proceso muy organizado, feedback constante y oportunidades de crecimiento claras.',
                    'Empresa innovadora con tecnolog√≠a de punta y proyectos desafiantes.',
                    'Cultura empresarial s√≥lida, horarios flexibles y beneficios competitivos.',
                    'Equipo multidisciplinario, aprendizaje continuo y reconocimiento al esfuerzo.',
                    'Proceso transparente, entrevistas t√©cnicas bien estructuradas y evaluaci√≥n justa.',
                    'Empresa con visi√≥n clara, productos interesantes y mercado establecido.',
                    'Ambiente din√°mico, proyectos diversos y posibilidad de impacto real.',
                    'Equipo t√©cnico s√≥lido, metodolog√≠as √°giles y herramientas modernas.',
                    'Cultura de innovaci√≥n, experimentaci√≥n y desarrollo profesional.'
                ],
                'cons_templates': [
                    'Proceso muy largo, m√∫ltiples entrevistas y tiempo de respuesta lento.',
                    'Falta de claridad en los requisitos del puesto y expectativas poco definidas.',
                    'Comunicaci√≥n interna podr√≠a mejorar, informaci√≥n fragmentada.',
                    'Proceso de selecci√≥n muy t√©cnico, poco enfoque en habilidades blandas.',
                    'Tiempo de espera excesivo entre entrevistas, falta de feedback oportuno.',
                    'Estructura organizacional compleja, procesos burocr√°ticos.',
                    'Falta de transparencia en el salario y beneficios durante el proceso.',
                    'Equipo de reclutamiento poco preparado, preguntas repetitivas.',
                    'Proceso muy competitivo, evaluaci√≥n muy estricta.',
                    'Falta de informaci√≥n sobre la cultura de la empresa.'
                ],
                'interview_questions': [
                    '¬øCu√°l es tu experiencia con React y JavaScript moderno?',
                    'Describe un proyecto desafiante que hayas liderado.',
                    '¬øC√≥mo manejas el trabajo en equipo bajo presi√≥n?',
                    '¬øQu√© metodolog√≠as √°giles conoces y has aplicado?',
                    'Explica tu proceso de resoluci√≥n de problemas t√©cnicos.',
                    '¬øC√≥mo te mantienes actualizado con las nuevas tecnolog√≠as?',
                    'Describe una situaci√≥n donde tuviste que aprender algo nuevo r√°pidamente.',
                    '¬øCu√°l es tu enfoque para escribir c√≥digo limpio y mantenible?',
                    '¬øC√≥mo manejas los conflictos en el equipo de desarrollo?',
                    '¬øQu√© te motiva m√°s en tu carrera profesional?'
                ]
            }
        ]
        
        # ===== OBTENER EMPRESAS =====
        companies = Company.objects.filter(is_active=True)
        total_companies = companies.count()
        
        self.stdout.write(f'üìä Empresas encontradas: {total_companies}')
        
        if total_companies == 0:
            self.stdout.write(self.style.ERROR('‚ùå No hay empresas activas en el sistema'))
            return
        
        # ===== CREAR USUARIOS ALEATORIOS =====
        created_users = []
        for i in range(50):  # Crear 50 usuarios aleatorios
            first_name = random.choice(first_names)
            last_name = random.choice(last_names)
            username = f"{first_name.lower()}{last_name.lower()}{random.randint(10, 99)}"
            
            # Verificar que el usuario no exista
            if not User.objects.filter(username=username).exists():
                user = User.objects.create_user(
                    username=username,
                    email=f"{username}@example.com",
                    password='password123',
                    first_name=first_name,
                    last_name=last_name
                )
                
                # Crear perfil de candidato
                UserProfile.objects.create(
                    user=user,
                    role='candidate',
                    display_name=f"{first_name} {last_name}"
                )
                
                created_users.append(user)
        
        self.stdout.write(f'üë• Usuarios creados: {len(created_users)}')
        
        # ===== LLENAR EMPRESAS CON RESE√ëAS =====
        total_reviews_created = 0
        
        for company in companies:
            # Determinar n√∫mero de rese√±as para esta empresa
            num_reviews = random.randint(min_reviews, max_reviews)
            
            self.stdout.write(f'üè¢ Procesando {company.name} - {num_reviews} rese√±as')
            
            for i in range(num_reviews):
                # Seleccionar usuario aleatorio
                user = random.choice(created_users)
                user_profile = user.profile
                
                # Seleccionar template aleatorio
                template = random.choice(review_templates)
                
                # Generar datos √∫nicos
                job_title = random.choice(template['job_titles'])
                pros = random.choice(template['pros_templates'])
                cons = random.choice(template['cons_templates'])
                interview_questions = random.choice(template['interview_questions'])
                
                # Calificaciones aleatorias pero realistas
                overall_rating = random.randint(3, 5)  # Mayor√≠a positivas
                communication_rating = random.choice(['excellent', 'good', 'regular'])
                difficulty_rating = random.choice(['moderate', 'difficult', 'easy'])
                response_time_rating = random.choice(['same_day', 'next_day', 'few_days'])
                modality = random.choice(['presencial', 'remoto', 'h√≠brido'])
                
                # Fecha aleatoria en los √∫ltimos 6 meses
                days_ago = random.randint(1, 180)
                submission_date = timezone.now() - timedelta(days=days_ago)
                
                # Crear rese√±a
                review = Review.objects.create(
                    user_profile=user_profile,
                    company=company,
                    job_title=job_title,
                    modality=modality,
                    communication_rating=communication_rating,
                    difficulty_rating=difficulty_rating,
                    response_time_rating=response_time_rating,
                    overall_rating=overall_rating,
                    pros=pros,
                    cons=cons,
                    interview_questions=interview_questions,
                    status='approved',  # Aprobar autom√°ticamente
                    is_approved=True,
                    submission_date=submission_date,
                    approval_date=submission_date + timedelta(hours=random.randint(1, 24))
                )
                
                total_reviews_created += 1
        
        # ===== ESTAD√çSTICAS FINALES =====
        self.stdout.write(
            self.style.SUCCESS(f'\n‚úÖ Proceso completado exitosamente!')
        )
        self.stdout.write(f'üìä Rese√±as creadas: {total_reviews_created}')
        self.stdout.write(f'üë• Usuarios creados: {len(created_users)}')
        self.stdout.write(f'üè¢ Empresas procesadas: {total_companies}')
        
        # Mostrar estad√≠sticas por empresa
        self.stdout.write('\nüìà Rese√±as por empresa:')
        for company in companies:
            review_count = company.reviews.count()
            self.stdout.write(f'  {company.name}: {review_count} rese√±as')
